scopeName: 'source.scheme'
name: 'Scheme'
fileTypes: [
  'scm'
  'sch'
  'ss'
  'rkt'
]

# The foldings do not currently work the way I want them to. This
# may be a limitation of the way they are applied rather than the
# regexps in use. Nonetheless, the foldings will end on the last
# identically indented blank line following an s-expression. Not
# ideal perhaps, but it works. Also, the #illegal pattern never
# matches an unpaired ( as being illegal. Why?! -- Rob Rix
#
# Ok, hopefully this grammar works better on quoted stuff now.  It
# may break for fancy macros, but should generally work pretty
# smoothly.  -- Jacob Rus
#
# I have attempted to get this under control but because of the way folding
# and indentation interact in Textmate, I am not sure if it is possible. In the
# meantime, I have implemented Python-style folding anchored at newlines.
# Additionally, I have made some minor improvements to the numeric constant
# highlighting. Next up is square bracket expressions, I guess, but that
# should be trivial. -- ozy


patterns: [
  { include: '#comment' }
  { include: '#s-expression' }
  { include: '#string' }
  { include: '#language-function' }
  { include: '#quote' }
  { include: '#illegal' }
]

repository:

  'comment': {
    patterns: [
      { include: '#inlineComment' }
      { include: '#blockComment'}
    ]
  }

  'inlineComment': {
    begin: '(^[ \\t]+)?(?=;)'
    beginCaptures:
      1: name: 'punctuation.whitespace.comment.leading.scheme'
    end: '(?!\\G)'
    patterns: [{ include: '#inlineCommentText' }]
  }

  'inlineCommentText': {
    name: 'comment.line.semicolon.scheme'
    begin: ';'
    beginCaptures:
      0: name: 'punctuation.definition.comment.scheme'
    end: '\\n'
  }

  'blockComment': {
    name: 'comment.block.r6rs.scheme'
    begin: '\\#\\|'
    end: '\\|\\#'
  }

  's-expression': {
    name: 'meta.expression.scheme'
    begin: '(\\()'
    beginCaptures:
      0: name: 'punctuation.section.expression.begin.scheme'
    end: '(\\))(\\n)?'
    endCaptures:
      1: name: 'punctuation.section.expression.end.scheme'
      2: name: 'meta.after-expression.scheme'
    patterns: [
      { include: '#inlineComment' }
      { include: '#define-procedure' }
      { include: '#lambda' }
      { include: '#define-variable'}
      { include: '#quote-keyword' }
      { include: '#quote' }
      { include: '#language-function' }
      { include: '#string' }
      { include: '#datum' }
      { include: '#cons-dot' }
      { include: '#s-expression' }
      { include: '#illegal' }
    ]
  }

  'define-procedure': {
    name: 'meta.declaration.procedure.scheme'
    begin: '(?x)
            (?<=\\()
            (define)\\s+
            (\\()
            ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)
            ((\\s+
              ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])
             )*
            )\\s*
            (\\))'
    captures:
      1: name: 'keyword.control.scheme'
      2: name: 'punctuation.definition.function.scheme'
      3: name: 'entity.name.function.scheme'
      4: name: 'variable.parameter.function.scheme'
      7: name: 'punctuation.definition.function.scheme'
    end: '(?=\\))'
    patterns: [
      { include: '#inlineComment' }
      { include: '#s-expression' }
      { include: '#illegal' }
    ]
  }

  'define-variable': {
    name: 'meta.declaration.variable.scheme'
    begin: '(?x)
            (?<=\\()
            (define)\\s
            ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)
            \\s*
            .*?'
    captures:
      1: name: 'keyword.control.scheme'
      2: name: 'variable.other.scheme'
    end: '(?=\\))'
    patterns: [
      { include: '#inlineComment' }
      { include: '#datum' }
      { include: '#string' }
      { include: '#quote' }
      { include: '#s-expression' }
      { include: '#illegal' }
    ]
  }

  'lambda': {
    name: 'meta.declaration.procedure.scheme'
    comment: 'Not sure this one is quite correct.  That \\s* is
              particularly troubling'
    begin: '(?x)
            (?<=\\()
            (lambda)\\s+
            (\\()
              (
                (?:
                  ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])
                  \\s+
                )*
                (?:
                  ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])
                )?
              )
            (\\))'
    captures:
      1: name: 'keyword.control.scheme'
      2: name: 'punctuation.definition.variable.scheme'
      3: name: 'variable.parameter.scheme'
      6: name: 'punctuation.definition.variable.scheme'
    end: '(?=\\))'
    patterns: [
      { include: '#inlineComment' }
      { include: '#s-expression' }
      { include: '#illegal' }
    ]
  }

  'datum': {
    patterns: [
      { include: '#boolean' }
      { include: '#character'}
      { include: '#named-character'}
      { include: '#number' }
      { include: '#hex-literal'}
    ]
  }

  'boolean': {
    name: 'constant.language.boolean.scheme'
    match: '#[t|f]'
  }

  'character':{
    name: 'constant.character.escape.scheme'
    comment: '#\ followed by any character'
    match: '(?<=[\\(\\s])(#\\\\).(?=[\\s\\)])'
  }

  'named-character': {
    name: 'constant.character.named.scheme'
    match: '(?<=[\\(\\s])(#\\\\)(space|newline|tab)(?=[\\s\\)])'
  }

  'number': {
    name: 'constant.numeric.scheme'
    match: '(?<=[\\(\\s])((#e|#i)?[0-9]+(\\.[0-9]+)?|(#x)[0-9a-fA-F]+|(#o)[0-7]+|(#b)[01]+)(?=[\\s;()\'",\\[\\]])'
  }

  'hex-literal': {
    name: 'constant.character.hex-literal.scheme'
    match: '(?<=[\\(\\s])(#\\\\)x[0-9A-F]{2,4}(?=[\\s\\)])'
  }

  'cons-dot': {
    name: 'punctuation.separator.cons.scheme'
    comment: 'the . in (a . b) which conses together two elements a and b.
              (a b c) == (a . (b . (c . nil)))'
    match: '(?<=[ ()])\\.(?=[ ()])'
  }

  'string': {
    name: 'string.quoted.double.scheme'
    begin: '(")'
    beginCaptures:
      1: name: 'punctuation.definition.string.begin.scheme'
    end: '(")'
    endCaptures:
      1: name: 'punctuation.definition.string.end.scheme'
    patterns: [
      { include: '#escaped-string-character' }
      { include: '#invalid-escaped-string-character' }
    ]
  }

  'escaped-string-character': {
    comment: 'Literal backslash character followed by double-quote or backslash'
    name: 'constant.character.escape.scheme'
    match: '\\\\[\\"\\\\]'
  }

  'invalid-escaped-string-character': {
    comment: 'Literal backslash character followed by any other character'
    name: 'invalid.illegal.character_not_allowed_here.scheme'
    match: '\\\\(?=[^\\"\\\\])'
  }

  'language-function': {
    patterns: [
      { include: '#control-keyword' } # not the best label!
      { include: '#predicate' }
      { include: '#type-convert-keyword' }
      { include: '#support-function-with-side-effect' }
      { include: '#arithmetic-operator' }
      { include: '#other-function'}
    ]
  }

  'control-keyword': {
    name: 'keyword.control.scheme'
    match: '(?x)
            (?<=(\\s|\\(|\\[))
            ( do|or|and|else|quasiquote|begin|if|case|set!|
              cond|let|unquote|define|let\\*|unquote-splicing|delay|
              letrec
            )
            (?=(\\s|\\())'
  }

  'predicate': {
    name: 'support.function.boolean-test.scheme'
    comment: 'These functions run a test, and return a boolean answer.
              Note: name ends with ?'
    match: '(?x)
            (?<=(\\s|\\())
            ( char-alphabetic|char-lower-case|char-numeric|
              char-ready|char-upper-case|char-whitespace|
              (?:char|string)(?:-ci)?(?:=|<=?|>=?)|
              atom|boolean|bound-identifier=|char|complex|
              identifier|integer|symbol|free-identifier=|inexact|
              eof-object|exact|list|(?:input|output)-port|pair|
              real|rational|zero|vector|negative|odd|null|string|
              eq|equal|eqv|even|number|positive|procedure
            )
            (\\?)
            (?=(\\s|\\())'
  }

  'type-convert-keyword': {
    name: 'support.function.convert-type.scheme'
    comment: 'These functions change one type into another.'
    match: '(?x)
            (?<=(\\s|\\())
            ( char->integer|exact->inexact|inexact->exact|
              integer->char|symbol->string|list->vector|
              list->string|identifier->symbol|vector->list|
              string->list|string->number|string->symbol|
              number->string
            )
            (?=(\\s|\\())'
  }

  'support-function-with-side-effects': {
    name: 'support.function.with-side-effects.scheme'
    comment: 'These functions are potentially dangerous because
              they have side-effects which could affect other
              parts of the program.
              Note: name ends with !'
    match: '(?x)
            (?<=(\\s|\\())
            ( set-(?:car|cdr)|
              (?:vector|string)-(?:fill|set)
            )
            (!)
            (?=(\\s|\\())'
  }

  'arithmetic-operator': {
    name: 'keyword.operator.arithmetic.scheme'
    comment: '+, -, *, /, =, >, etc.'
    match: '(?x)
            (?<=(\\s|\\())
            ( >=?|<=?|=|[*/+-])
            (?=(\\s|\\())'
  }

  'other-function': {
    name: 'support.function.general.scheme'
    match: '(?x)
            (?<=(\\s|\\())
            ( append|apply|approximate|
              call-with-current-continuation|call/cc|catch|
              construct-identifier|define-syntax|display|foo|
              for-each|force|cd|gen-counter|gen-loser|
              generate-identifier|last-pair|length|let-syntax|
              letrec-syntax|list|list-ref|list-tail|load|log|
              macro|magnitude|map|map-streams|max|member|memq|
              memv|min|newline|nil|not|peek-char|rationalize|
              read|read-char|return|reverse|sequence|substring|
              syntax|syntax-rules|transcript-off|transcript-on|
              truncate|unwrap-syntax|values-list|write|write-char|

              cons|c(a|d){1,4}r|

              abs|acos|angle|asin|assoc|assq|assv|atan|ceiling|
              cos|floor|round|sin|sqrt|tan|
              (?:real|imag)-part|numerator|denominator|

              modulo|exp|expt|remainder|quotient|lcm|

              call-with-(?:input|output)-file|
              (?:close|current)-(?:input|output)-port|
              with-(?:input|output)-from-file|
              open-(?:input|output)-file|

              char-(?:downcase|upcase|ready)|

              make-(?:polar|promise|rectangular|string|vector)

              string(?:-(?:append|copy|length|ref))?|
              vector(?:-length|-ref)
            )
            (?=(\\s|\\())'
  }

  'quote': {
    comment: 'We need to be able to quote any kind of item, which creates
              a tiny bit of complexity in our grammar. It is hopefully
              not overwhelming complexity.
              Note: the first two matches are special cases. Quoted
              symbols and quoted empty lists are considered constant.other'
    patterns: [
      { include: '#quoted-symbol'}
      { include: '#quoted-empty-list'}
      { include: '#quoted-string-or-s-expression'}
    ]
  }

  'quoted-symbol': {
    name: 'constant.other.symbol.scheme'
    match: '(?x)
            (\')\\s*
            ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)'
    captures:
      1: name: 'punctuation.section.quoted.symbol.scheme'
  }

  'quoted-empty-list': {
    name: 'constant.other.empty-list.scheme'
    match: '(?x)
            (\')\\s*
            ((\\()\\s*(\\)))'
    captures:
      1: name: 'punctuation.section.quoted.empty-list.scheme'
      2: name: 'meta.expression.scheme'
      3: name: 'punctuation.section.expression.begin.scheme'
      4: name: 'punctuation.section.expression.end.scheme'
    }

  'quoted-string-or-s-expression': {
    name: 'string.other.quoted-object.scheme'
    comment: 'quoted double-quoted string or s-expression'
    begin: '(\')\\s*'
    beginCaptures:
      1: name: 'punctuation.section.quoted.scheme'
    end: '(?=[\\s()])|(?<=\\n)'
    patterns: [{ include: '#quoted-content' }]
  }

  'quote-keyword': {
    comment: 'Something quoted with (quote «thing»).  In this case «thing»
              will not be evaluated, so we are considering it a string.'
    begin: '(?<=\\()\\s*(quote)\\b\\s*'
    beginCaptures:
      1: name: 'keyword.control.quote.scheme'
    contentName: 'string.other.quote.scheme'
    end: '(?=[\\s)])|(?<=\\n)'
    patterns: [{ include: '#quoted-content' }]
  }

  'quoted-content': {
    patterns: [
      { include: '#string' }
      { include: '#quote' }
      { include: '#illegal' }
      { include: '#content-of-quoted-content'}
    ]
  }

  'content-of-quoted-content': {
    name: 'meta.expression.scheme'
    begin: '(\\()'
    beginCaptures:
      1: name: 'punctuation.section.expression.begin.scheme'
    end: '(\\))'
    endCaptures:
      1: name: 'punctuation.section.expression.end.scheme'
    patterns: [{ include: '#quoted-content' }]
  }

  'illegal': {
    name: 'invalid.illegal.parenthesis.scheme'
    match: '[()\\[\\]]'
  }
